# coding=utf-8
# 设计和调试

# IF 语句的规则：
# 每一个“if 语句”必须包含一个 else.
# 如果这个else永远都不应该被执行到，因为它本身没有任何意义，那你必须在else语句后面使用一个叫做die的函数，让它打印出错误信息,这和上一节的习题类似，这样你可以找到很多的错误。
# “if 语句”的嵌套不要超过 2 层，最好尽量保持只有 1 层。
# 将“if 语句”当做段落来对待，其中的每一个if-elif-else 组合就跟一个段落的句子一样。在这种组合的最前面和最后面留一个空行以作区分。
# 你的布尔测试应该很简单，如果它们很复杂的话，你需要将它们的运算事先放到一个 变量里，并且为变量取一个好名字。
# 如果你遵循以上规则，你就会写出比大部分程序员都好的代码来。回到上一节练习，看看我有没有遵循这些规则，如果没有的话，就将其改正过来。
#
# Warning: 在日常编程中不要死板的遵守规则。在训练中，你需要通过这些规则的应用来巩固你学到的知识，而在实际编程中这些规则有时其实很蠢。如果你觉得哪个规则很蠢，就别使用它。
#
# 循环的规则
# 只有在循环永不停止时使用“while循环”，这意味着你可能永远都用不到。这条只有 Python 中成立，其他的语言另当别论。
# 其他类型的循环都使用“for循环”，尤其是在循环的对象数量固定或者有限的情况下。
# 调试的小技巧
# 不要使用 “debugger”。Debugger所作的相当于对病人的全身扫描。你不会得到某方面的有用信息，而且你会发现它输出的信息大部分没有用，或者只会让你更困惑。
# 最好的调试程序的方法是使用print,在各个你想要检查的关键环节将关键变量打印出来，从而检查哪里是否有错。
# 让程序一部分一部分地运行起来。不要等一个很长的脚本写完后才去运行它。写一点，运行一点，修改一点。
# 家庭